/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package view;

/**
 *
 * @author ramir
 */

//-----imports-----
//--controlador
import Controller.ControladorLaberinto;

//--graphics
import java.awt.Graphics;
import java.awt.Image;

//--border
import javax.swing.BorderFactory;

//--imageIcon
import javax.swing.ImageIcon;

//modelo
import modelo.KianPersonaje;
import modelo.Laberinto; //matriz
import modelo.SeelieEnemigo;

//codigo
public class PanelLaberinto extends javax.swing.JPanel {
    private ControladorLaberinto controladorLaberinto;

    //------panel temporal------
    private ImageIcon areaLaberinto;
    
    
    //------panel futuro------
   
    private Laberinto matrizL; //llamar ala matriz
    
    //llamar personaje
    private KianPersonaje personaje;
    
    //llamar Enemigo
    private SeelieEnemigo enemigo;
    
    //image
    private Image camino, pared, limite, pista, agua;   
     private Image imgPersonaje,imgEnemigo;

    /**
     * Creates new form PanelLaberinto
     */
    public PanelLaberinto() {
        initComponents();
        
        //------panel temporal------
        //Este metodo crea el espacio para subir la imagen de la parte juagable del laberinto 
        areaLaberinto = new ImageIcon("./src/main/resources/img/areaJuego.png");
        
        //------panel futuro------
        //---declarar imagenes
        //cargarImagenes(); //Esta en comentario para no afectar el codigo actual (por el momento)
        
        this.personaje=personaje;//declarar personaje
       
        this.enemigo=enemigo;//declarar enemigo
    }//fin metodo constructor sin parametros

    public void setControlador(ControladorLaberinto controladorLaberinto){
       this.controladorLaberinto=controladorLaberinto;
   }//fin setControlador
   
    
   //------panel temporal------
    public void paint(Graphics g){
        super.paint(g);
        areaLaberinto.paintIcon(this, g, 0, 0);
    }//fin paint
    
     //------panel futuro------
    private void cargarImagenes(){
        camino =new ImageIcon(getClass().getResource("./img/camino.png")).getImage();
        pared =new ImageIcon(getClass().getResource("./img/pared.png")).getImage();
        limite =new ImageIcon(getClass().getResource("./img/limite.png")).getImage();
        agua =new ImageIcon(getClass().getResource("./img/agua.png")).getImage();
        pista =new ImageIcon(getClass().getResource("./img/pista.png")).getImage();
        imgPersonaje = new ImageIcon(getClass().getResource("./img/kianPersonaje.gif")).getImage();
        imgEnemigo = new ImageIcon(getClass().getResource("./img/enemigo.gif")).getImage();
    }//fin cargarImagenes

 
    /* @Override
    protected void paintComponent(Graphics g){
        super.paintComponent(g);
        
        //la matriz debe existir
        int[][] laberinto = matrizL.getLaberinto();
        
        //tama√±o celdas
        int size=46;
        
        for(int y=0; y< laberinto.length; y++){
            for(int x = 0; x < laberinto[y].length;x++){
                switch(laberinto[y][x]){
                    case 0:
                        g.drawImage(camino, x*size, y*size, size, size, this);
                        break;
                        
                    case 1:  
                        g.drawImage(pared, x*size, y*size, size, size, this);
                        break;
                    
                    case 2:  
                        g.drawImage(limite, x*size, y*size, size, size, this);
                        break;                         
                        
                     case 3:  
                        g.drawImage(pista, x*size, y*size, size, size, this);
                        break;      
                }//fin swicth
            }
        }
        g.drawImage(imgPersonaje, size, size, this);
        
    }
    */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setOpaque(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
